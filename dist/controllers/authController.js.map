{"version":3,"sources":["../../controllers/authController.js"],"names":["promisify","require","User","AppError","catchAsync","sendEmail","validationResult","bcrypt","stripe","jwt","dotenv","config","path","OAuth2Client","client","process","env","GOOGLE_CLIENT_ID","signToken","id","sign","JWT_SECRET","expiresIn","JWT_EXPRISE_IN","createSendToken","user","statusCode","res","message","token","_id","cookieOptions","expires","Date","now","JWT_COOKIE_EXPIRES_IN","httpOnly","NODE_ENV","secure","cookie","password","undefined","status","json","data","exports","signup","req","email","role","passwordConfirm","categories","companyType","body","srtipe","customers","create","description","customerId","ResetOtp","createotp","save","subject","err","userValidotp","validateBeforeSave","verifyOTP","next","otp","findOne","select","correctotp","otpExpireTime","isTrue","login","checkPassword","compare","error","protect","headers","authorization","startsWith","split","decode","verify","currentUser","findById","changedPasswordAfter","iat","forgotpassword","resetPassword","passwordResetotp","passwordResetExpires","updatePassword","correctPassword","passwordCurrent","restrictTo","roles","includes","googleLogin","errors","isEmpty","payload","verifyIdToken","idToken","audience","console","log","send"],"mappings":"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","file":"authController.js","sourcesContent":["const { promisify } = require('util')\nconst User = require('./../models/userModel');\nconst AppError = require('./../utils/appError');\nconst catchAsync = require('./../utils/catchAsync');\nconst sendEmail = require('../utils/email');\nconst { validationResult } = require('express-validator');\nconst bcrypt = require('bcrypt')\nconst stripe = require('stripe')('sk_test_51N7wBGI06aS9z6rYIDfQ62UPHoTSjVFqHpW36GxstL0nh2QDGT3ugfuuVczNOMDUIj4bZ0QBEkZ5xIoP3ir2Hw8y00KhX7qHE6');\n\nconst jwt = require('jsonwebtoken')\nconst dotenv = require('dotenv');\ndotenv.config({ path: './config.env' });\n\nconst { OAuth2Client } = require('google-auth-library');\nconst client = new OAuth2Client(process.env.GOOGLE_CLIENT_ID);\n\nconst signToken = id => {\n  return jwt.sign(\n    { id },\n    process.env.JWT_SECRET,\n    { expiresIn: process.env.JWT_EXPRISE_IN }\n  )\n}\n\n/**\n * The function creates and sends a JWT token to the client along with user data and a success message.\n * @param user - The user object that contains the user's information, including their ID and password.\n * @param statusCode - The HTTP status code to be sent in the response. It can be any valid HTTP status\n * code such as 200, 201, 400, 401, 404, 500, etc.\n * @param res - `res` is the response object that is used to send the HTTP response back to the client.\n * It is typically passed as a parameter to an Express route handler function.\n * @param message - The message parameter is a custom message that can be passed to the function to be\n * included in the response JSON object. It can be used to provide additional information or context\n * about the response.\n */\nconst createSendToken = (user, statusCode, res, message) => {\n  const token = signToken(user._id);\n  const cookieOptions = {\n    expires: new Date(\n      Date.now() + process.env.JWT_COOKIE_EXPIRES_IN * 24 * 60 * 60 * 1000\n    ),\n    httpOnly: true\n  };\n  if (process.env.NODE_ENV === 'production') cookieOptions.secure = true;\n  res.cookie('jwt', token, cookieOptions);\n  user.password = undefined;\n\n  res.status(statusCode).json({\n    status: 'success',\n    token,\n    message: message,\n    data: {\n      user\n    }\n  });\n};\nexports.signup = catchAsync(async (req, res) => {\n  const { email, password, role, passwordConfirm, categories, companyType } = req.body;\n  const srtipe = await stripe.customers.create({\n    description: `${email} customer Id`,\n  });\n  const user = new User({\n    email,\n    password,\n    role,\n    passwordConfirm,\n    companyType,\n    customerId: srtipe.id\n  });\n  const ResetOtp = await user.createotp();\n  await user.save();\n  const message = `Please Vierify your Account with This OTP ${ResetOtp}.`\n  try {\n    await sendEmail({\n      email: user.email,\n      subject: 'Your Verify Account otp (valid for 10 mint)',\n      message\n    })\n    res.status(200).json({\n      status: 'success',\n      message: 'OTP send into email'\n    });\n  } catch (err) {\n    user.userValidotp = undefined;\n    await user.save({ validateBeforeSave: false });\n    return (new AppError('somting wrong to send email ', 500))\n  }\n}\n)\nexports.verifyOTP = catchAsync(async (req, res, next) => {\n  const { email, otp } = req.body\n  if (!(email, otp)) {\n    return next(new AppError('please provide email and otp !', 400))\n  }\n  const user = await User.findOne({ email }).select('+password')\n  if (!user || !await user.correctotp(otp, user.otp)) {\n    return next(new AppError('otp and email are incorrect!', 401))\n  }\n  if (user.otpExpireTime < Date.now()) {\n    return next(new AppError('OTP is invalid and expire', 400))\n  }\n  user.isTrue = true;\n  user.otp = undefined;\n  user.otpExpireTime = undefined;\n  await user.save({ validateBeforeSave: false });\n  const message = 'succssfully verify';\n  createSendToken(user, 200, res, message)\n})\nexports.login = catchAsync(async (req, res, next) => {\n  const { email, password, role } = req.body\n  if (!(email, password)) {\n    return next(new AppError('please provide email and password !', 400))\n  }\n\n  let user;\n  user = await User.findOne({ email }).select('+password +isTrue')\n  if (!user) {\n    return next(new AppError('Email not found', 404))\n  }\n\n  let checkPassword;\n  try {\n    checkPassword = await bcrypt.compare(password, user.password);\n  } catch (error) {\n    return next(new AppError('Password error', 500))\n  }\n\n  if (!checkPassword) {\n    return next(new AppError('Incorrect password', 401))\n  }\n\n  if (!user.isTrue) {\n    return next(new AppError('You are not verified Please verify again!', 401))\n  }\n  createSendToken(user, 200, res)\n}\n)\nexports.protect = catchAsync(async (req, res, next) => {\n  let token\n  if (req.headers.authorization && req.headers.authorization.startsWith('Beare')) {\n    token = req.headers.authorization.split(' ')[1]\n  }\n  if (!token) {\n    return next(new AppError('you are not logeed in! please login again', 401))\n  }\n  const decode = await promisify(jwt.verify)(token, process.env.JWT_SECRET);\n  const currentUser = await User.findById(decode.id)\n  if (!currentUser) {\n    return next(new AppError('The user dose not exist in this token', 401))\n  }\n  if (currentUser.changedPasswordAfter(decode.iat)) {\n    return next(new AppError('Password recently change so please login again for new TOKEN', 401))\n  }\n  req.user = currentUser;\n  next()\n})\nexports.forgotpassword = catchAsync(async (req, res, next) => {\n  const user = await User.findOne({ email: req.body.email })\n  if (!user) {\n    return next(new AppError('No user have with this email', 404))\n  }\n  const ResetOtp = await user.createotp()\n  await user.save({ validateBeforeSave: false });\n  const message = `Your Reset Password OTP is ${ResetOtp}`\n  try {\n    await sendEmail({\n      email: user.email,\n      subject: 'Your Password reset otp (valid for 10 mint)',\n      message\n    })\n    res.status(200).json({\n      status: 'success',\n      message: 'ResetPassword OTP send into email'\n    });\n  } catch (err) {\n    user.otp = undefined;\n    user.otpExpireTime = undefined;\n    await user.save({ validateBeforeSave: false });\n    return (new AppError('somting wrong to send email ', 500))\n  }\n})\nexports.resetPassword = catchAsync(async (req, res, next) => {\n  const { email, password, passwordConfirm } = req.body;\n  const user = await User.findOne({ email });\n  if (!user) {\n    return next(new AppError('OTP is invalid and expire', 400))\n  }\n  user.password = password\n  user.passwordConfirm = passwordConfirm\n  user.passwordResetotp = undefined;\n  user.passwordResetExpires = undefined;\n  await user.save();\n  const message = 'Your Password Chaged succssfully';\n  createSendToken(user, 200, res, message)\n\n});\nexports.updatePassword = catchAsync(async (req, res, next) => {\n  const user = await User.findById(req.user.id).select('+password');\n  if (!(await user.correctPassword(req.body.passwordCurrent, user.password))) {\n    return next(new AppError('Your current password is wrong.', 401));\n  }\n  const { password, passwordConfirm } = req.body\n  user.password = password\n  user.passwordConfirm = passwordConfirm\n  await user.save();\n  createSendToken(user, 200, res);\n}\n\n)\nexports.restrictTo = (...roles) => {\n  return (req, res, next) => {\n    // roles ['admin', 'lead-guide']. role='user'\n    if (!roles.includes(req.user.role)) {\n      return next(\n        new AppError('You do not have permission to perform this action', 403)\n      );\n    }\n\n    next();\n  };\n};\n\nexports.googleLogin = async (req, res, next) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return next(new AppError('Invalid data received', 422));\n  }\n\n  let payload;\n  try {\n    payload = await client.verifyIdToken({\n      idToken: req.body.token,\n      audience: process.env.GOOGLE_CLIENT_ID\n    });\n  } catch (error) {\n    console.log(error);\n    return next(new AppError('Error getting data', 500));\n  }\n\n  console.log({ payload });\n  res.send('ok');\n};"]}